name: build tinygo

on:
  push:
    branches: [ dev ]
    tags:
      - "v*.*.*"
  # pull_request:
  #   branches: [ main ]

jobs:
  run:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      GSCDK_VERSION: v0.3.0
    strategy:
      matrix:
        python-version: [3.9]
        # os: ['windows-latest', 'ubuntu-18.04', 'macos-latest']
        # python-version: [3.9]
        os: ['ubuntu-18.04']
      fail-fast: false

    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Install wget
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          choco install wget --no-progress
      - name: Download llvm-build
        working-directory: tinygo
        run: |
          wget https://github.com/uuosio/llvm-build-cache/releases/download/v0.0.2/llvm-build-${{ matrix.os }}.tar.gz
          tar -xf llvm-build-${{ matrix.os }}.tar.gz
      - name: Clone llvm-source
        working-directory: tinygo
        run: |
          make llvm-source
      - name: Build eosio-libs
        working-directory: tinygo
        run: make eosio-libs
      - name: Cache wasi-libc sysroot
        uses: actions/cache@v2
        id: cache-wasi-libc
        with:
          key: ${{ matrix.os }}-wasi-libc-sysroot-v1
          path: tinygo/lib/wasi-libc/sysroot
      - name: Build wasi-libc
        if: steps.cache-wasi-libc.outputs.cache-hit != 'true'
        working-directory: tinygo
        run: make wasi-libc
      - name: Cache wasi-libc-eosio sysroot
        uses: actions/cache@v2
        id: cache-wasi-libc-eosio
        with:
          key: ${{ matrix.os }}-wasi-libc-eosio-sysroot-v1
          path: tinygo/lib/wasi-libc-eosio/sysroot
      - name: Build wasi-libc-eosio
        if: steps.cache-wasi-libc-eosio.outputs.cache-hit != 'true'
        working-directory: tinygo
        run: make wasi-libc-eosio
      - name: Build tinygo
        working-directory: tinygo
        run: |
          make
          make release
      - name: Testing
        if: ${{ matrix.os != 'windows-latest' }}
        working-directory: tinygo
        run: |
          ./build/tinygo help
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: get plat name
        id: platname
        run: |
          echo "::set-output name=value::$(python scripts/get_plat_name.py)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          python -m pip install twine
      - name: Build uuosio.gscdk
        run: |
          cp -r tinygo/build/release/tinygo ./pysrc
          python setup.py sdist bdist_wheel --plat-name ${{ steps.platname.outputs.value }} > setup.log
      - name: get whl file
        id: whlfile
        run: |
          echo "::set-output name=value::$(python scripts/get_whl_file.py)"
      - name: Install uuosio.gscdk
        run: |
          python -m pip uninstall gscdk -y;python -m pip install ./dist/${{ steps.whlfile.outputs.value }}
      - name: Test
        working-directory: tinygo
        run: |
          cd tests/eosio/testcpp;go get -u -d github.com/uuosio/chain@master;./build.sh
      - name: release-tinygo
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./dist/${{ steps.whlfile.outputs.value }}

      - name: Downloading whl files
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-18.04' }}
        working-directory: dist
        run: |
          python ../scripts/download.py
          rm gscdk-0.3.0-py3-none-macosx_10_15_x86_64.whl
          rm gscdk-0.3.0-py3-none-manylinux1_x86_64.whl
      - name: Publish a Python distribution to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-18.04' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
